@inject HttpClient Http
@inject NavigationManager _navigationManager
@inject IDialogService DialogService
@implements IAsyncDisposable
<h1>Informes</h1>

@*<MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Info" OnClick="@(() => CreateReport())">Generar Informe</MudButton>*@
@if(pendingReports is not null)
{
	<h3>En cola:</h3>
	foreach(var pendingReport in pendingReports)
	{
		int count = 1;
		<MudCard Class="mb-2">
			<MudCardHeader>
				<CardHeaderContent>
					<div class="d-flex justify-content-start">
						<MudChip T="string" Label="true" Color="Color.Warning">@GetPosition(pendingReport.ReportName)</MudChip>
						<MudText>@pendingReport.ReportName</MudText>
					</div>						
						@if(GetPosition(pendingReport.ReportName) == "1")
						{
							<MudProgressLinear Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
						}
				</CardHeaderContent>
			</MudCardHeader>
		</MudCard>
		count++;
	}
}

@if(reports is not null)
{
	<h3>Finalizados:</h3>

	<MudTextField Class="mb-2" @bind-Value="searchString" Label="Buscar" Variant="Variant.Text" InputType="InputType.Text" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Adornment="Adornment.End"></MudTextField>

	foreach(var report in reports.Where(r => r.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || String.IsNullOrEmpty(searchString)))
	{
		
		<MudCard Class="mb-2">
			<MudCardHeader>
				<CardHeaderContent>
					<NavLink href=@($"/Informe/{report.Id}")>
						<MudText>@report.Name</MudText>
					</NavLink>
				</CardHeaderContent>
				<CardHeaderActions>
            		<MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" @onclick="async() => await DeleteReport(report.Id)"/>
        		</CardHeaderActions>
			</MudCardHeader>
		</MudCard>
		
	}
}

@code {
	private HubConnection? _hubConnection;
	private List<Report>? reports;
	private string searchString = String.Empty;
	private Queue<PendingReport>? pendingReports;
	private readonly List<string> _messages = new();
	protected override async Task OnInitializedAsync()
	{
		_hubConnection = new HubConnectionBuilder().WithUrl($"{UrlGetter.Url}notifications").Build();
		_hubConnection.On<string>("ReceiveNotification", message => 
			{
				_messages.Add(message);
				InvokeAsync(async() => await GetData());
			});

		await _hubConnection.StartAsync(); 
		await GetData();
	}

	public async Task GetData()
	{
		pendingReports = await Http.GetFromJsonAsync<Queue<PendingReport>>($"{UrlGetter.Url}Report/GetPendingReports"); 
		var task = Http.GetFromJsonAsync<List<Report>>($"{UrlGetter.Url}Report/GetAll");
		await task.ContinueWith((r) =>
		{
			reports = r.Result;
			StateHasChanged();
		});
	}


	private async Task DeleteReport(int id){
		var report = reports.FirstOrDefault(r => r.Id == id);
		var factory = new EventCallbackFactory();
		var parameters = new DialogParameters<DialogDeleteReport>
        {
            { x => x.ContentText, $"Estas seguro de que quieres borrar la el informe \"{report.Name}\"?" },
            { x => x.ButtonText, "Borrar" },
            { x => x.Color, Color.Error },
			{ x => x.Id, id },
			{ x => x.updateUI, factory.Create(this,() => GetData())}
        };
		var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

		var dialog = DialogService.ShowAsync<DialogDeleteReport>("Borrar", parameters, options);

		await dialog;
	}

	public async Task CreateReport()
	{
		
		var brands = await Http.GetFromJsonAsync<List<Brand>>($"{UrlGetter.Url}Brand/GetBrands");
			
		var factory = new EventCallbackFactory();
		var parameters = new DialogParameters<DialogCreateReport>
        {   
			{ x => x.Brands, brands},
            { x => x.ButtonText, "Crear" },
            { x => x.Color, Color.Success },
			{ x => x.updateUI, factory.Create(this,() => GetData())}
        };
		var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
	}

	public string GetPosition(string reportName)
	{
		var count = 1;
		foreach(var pendingReport in pendingReports)
		{
			if (pendingReport.ReportName == reportName)
			{
				return count.ToString();
			}
			count++;
		}
		return "Error";
	}

	public async ValueTask DisposeAsync()
	{
		if(_hubConnection is not null)
		{
			await _hubConnection.DisposeAsync();
		}
	}

}
