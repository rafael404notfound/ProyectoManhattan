@inject HttpClient Http
<PageTitle>@brandName</PageTitle>

<h1>@brandName</h1>
@if(result is not null)
{
    <h3>Uneco:</h3>
    <MudText>@result.Uneco</MudText>

    <h3>Stock</h3>
    <MudTable Hover="true" Height="500px" FixedHeader="true"
              Items="@shoeTableContexts"
              GroupBy="@_groupDefinition"
              GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
              GroupFooterClass="mb-4"
              Dense="true"
              Breakpoint="Breakpoint.None"
              @ref="_tableRef">
        <ColGroup>
            <col style="width: 60px;" />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh>Talla</MudTh>
            <MudTh>Stock</MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.Key.ToString()?.Substring(3, 4)} {context.Key.ToString()?.Substring(7, 3)} {context.Key.ToString()?.Substring(10, 5)}")</MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="Talla">@context.Size</MudTd>
            <MudTd DataLabel="Stock">@context.Count</MudTd>
        </RowTemplate>
    </MudTable>
}

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>


@code {
    [Parameter] public string brandName { get; set; } = string.Empty;
    public Brand? result { get; set; } 
    public bool loading { get; set; } = false;
    public List<ShoeTableContext> shoeTableContexts { get; set; } = new List<ShoeTableContext>();
    private MudTable<ShoeTableContext> _tableRef;

    protected override async Task OnInitializedAsync()
    {
        
        loading = true;
        result = await Http.GetFromJsonAsync<Brand>($"{UrlGetter.Url}Brand/GetBrand?brand={brandName}");
        shoeTableContexts = GetBrandTableCotnexts(result);
        loading = false;
        
    }

    public class ShoeTableContext
    {
        public string? RefWithOutSize { get; set; }
        public int Size { get; set; }
        public int Count { get; set; }
    }


    public List<ShoeTableContext> GetBrandTableCotnexts(Brand brand)
    {
        foreach (var shoeModel in brand.ShoeModels)
        {
            foreach (var shoe in shoeModel.Sizes)
            {
                shoeTableContexts.Add(new ShoeTableContext
                    {
                        RefWithOutSize = shoeModel.RefWithOutSize,
                        Size = shoe.Size,
                        Count = shoe.Count
                    });
            }
            
        }
        
        return shoeTableContexts.OrderBy(b => b.RefWithOutSize).ToList();
    }

    private TableGroupDefinition<ShoeTableContext> _groupDefinition = new()
        {
            GroupName = "Marca",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (b) => b.RefWithOutSize
        };

    /*private TableGroupDefinition<ShoeTableContext> _groupDefinition = new()
            {
            GroupName = "Modelo",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (s) => s.RefWithOutSize
    };*/
}